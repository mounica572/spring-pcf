{"version":3,"sources":["components/MessageWindow.js","components/UserForm.js","components/MessageSubmit.js","App.js","serviceWorker.js","index.js"],"names":["MessageWindow","props","formatDate","date","d","Date","userTimezoneOffset","getTimezoneOffset","getTime","toUTCString","slice","scrollToBottom","messagesEnd","scrollIntoView","block","inline","behavior","state","messages","bind","console","log","this","connect","evtSource","EventSource","onopen","onmessage","e","messagesListHandler","JSON","parse","data","onerror","err","un","username","Fragment","className","messageClass","ref","el","map","message","index","key","text","createdAt","Component","UserForm","usernameClass","type","onChange","usernameHandler","target","value","onClick","usernameClickHandler","MessageSubmit","messageSubmitClass","id","messageChangeHandler","messageClickHandler","App","noteText","stompClient","connectSocket","error","setTimeout","Stomp","socket","SockJS","onheartbeat","stmp","frame","subscribe","msg","body","stompFailureCallback","setState","msgArray","tmp","_","uniqBy","sort","a","b","send","stringify","class","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd1c97a0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass MessageWindow extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { messages: [] };\n    this.formatDate = this.formatDate.bind(this);\n    this.messagesEnd = null;\n    console.log(\"props\", this.props);\n  }\n\n  componentDidMount() {\n    this.connect();\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  formatDate = date => {\n    let d = new Date(date);\n    var userTimezoneOffset = d.getTimezoneOffset() * 60000;\n    let d2 = new Date(d.getTime() - userTimezoneOffset);\n    return d2.toUTCString().slice(0, -4);\n  };\n\n  connect() {\n    const evtSource = new EventSource(\"/stream/messages\");\n    //const evtSource = new EventSource(\"http://localhost:8090/stream/messages\");\n    evtSource.onopen = function() {};\n    evtSource.onmessage = e => {\n      //  let tmp = [...this.state.messages, JSON.parse(e.data)];\n      //  tmp = _.uniqBy(tmp, \"id\");\n      //  this.setState({ messages: tmp });\n      this.props.messagesListHandler([JSON.parse(e.data)]);\n    };\n    evtSource.onerror = function(err) {\n      // console.warn(\"EventSource failed:\", err);\n    };\n  }\n\n  scrollToBottom = () => {\n    this.messagesEnd.scrollIntoView({\n      block: \"end\",\n      inline: \"nearest\",\n      behavior: \"smooth\"\n    });\n    //this.messagesEnd.scrollTop = this.messagesEnd.scrollHeight;\n  };\n\n  render() {\n    let formatDate = this.formatDate;\n    let un = this.props.username;\n    return (\n      <React.Fragment>\n        <div className={`welcome-pane ${this.props.messageClass}`}>\n          <h3>Welcome, {this.props.username}</h3>\n          <hr />\n        </div>\n        <div className={`message-window ${this.props.messageClass}`}>\n          <ul\n            className=\"message-list\"\n            ref={el => {\n              this.messagesEnd = el;\n            }}\n          >\n            {this.props.messages.map(function(message, index) {\n              return (\n                <li key={index}>\n                  <span className=\"username\">\n                    {message.username ? message.username : un} :{\" \"}\n                  </span>\n                  <span className=\"message-text\"> {message.text} </span>\n                  <div className=\"date\">{formatDate(message.createdAt)}</div>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default MessageWindow;\n","import React, { Component } from \"react\";\nclass UserForm extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className={`user-form ${this.props.usernameClass}`}>\n        <div className=\"header\"> Please Enter a User Name </div>\n        <input\n          type=\"text\"\n          className=\"textInput\"\n          onChange={e => this.props.usernameHandler(e.target.value)}\n        />\n        <div>\n          <a\n            type=\"button\"\n            className=\"btn btn-dark\"\n            onClick={e => this.props.usernameClickHandler()}\n          >\n            Submit\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UserForm;\n","import React, { Component } from \"react\";\nimport _ from \"lodash\";\n\nclass MessageSubmit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { message: \"\" };\n  }\n\n  render() {\n    return (\n      <div className={`message-container ${this.props.messageSubmitClass}`}>\n        <form>\n          <input\n            className=\"message-form\"\n            id=\"message\"\n            type=\"text\"\n            onChange={e => this.props.messageChangeHandler(e.target.value)}\n          />\n          <div>\n            <p className=\"text-center\">Type your message here</p>\n            <a\n              type=\"button\"\n              className=\"btn btn-dark\"\n              onClick={e => this.props.messageClickHandler()}\n            >\n              Submit\n            </a>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default MessageSubmit;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport MessageWindow from \"./components/MessageWindow\";\nimport UserForm from \"./components/UserForm\";\nimport MessageSubmit from \"./components/MessageSubmit\";\nimport * as Stomp from \"stompjs\";\nimport * as SockJS from \"sockjs-client\";\nimport _ from \"lodash\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      noteText: \"\",\n      username: \"\",\n      messageClass: \"hide\",\n      usernameClass: \"show\",\n      messageSubmitClass: \"hide\",\n      messages: []\n    };\n    this.usernameHandler = this.usernameHandler.bind(this);\n    this.usernameClickHandler = this.usernameClickHandler.bind(this);\n    this.messageClickHandler = this.messageClickHandler.bind(this);\n    this.messageChangeHandler = this.messageChangeHandler.bind(this);\n    this.messagesListHandler = this.messagesListHandler.bind(this);\n    this.stompClient = null;\n  }\n\n  /*function connect() {\n    var socket = new SockJS('/gs-guide-websocket');\n    stompClient = Stomp.over(socket);\n    stompClient.connect({}, function (frame) {\n        setConnected(true);\n        console.log('Connected: ' + frame);\n        stompClient.subscribe('/topic/greetings', function (greeting) {\n            showGreeting(JSON.parse(greeting.body).content);\n        });\n    });\n}*/\n\n  /*function disconnect() {\n    if (stompClient !== null) {\n        stompClient.disconnect();\n    }\n    setConnected(false);\n    console.log(\"Disconnected\");\n}*/\n\n  /*function sendName() {\n    stompClient.send(\"/app/hello\", {}, JSON.stringify({'name': $(\"#name\").val()}));\n}*/\n\n  componentDidMount() {\n    this.connectSocket();\n  }\n\n  stompFailureCallback(error) {\n    console.log(\"STOMP: \" + error);\n    setTimeout(this.connectSocket, 5000);\n    console.log(\"STOMP: Reconecting in 5 seconds\");\n  }\n\n  connectSocket() {\n    console.log(\"Stomp\", Stomp);\n    let messagesListHandler = this.messagesListHandler;\n    var socket = new SockJS(\"/mywebsockets\");\n    socket.onheartbeat = function() {\n      console.log(\"heartbeat\");\n    };\n    this.stompClient = Stomp.over(socket);\n    let stmp = this.stompClient;\n    stmp.connect(\n      {},\n      function(frame) {\n        // setConnected(true);\n        console.log(\"Connected: \" + frame);\n        stmp.subscribe(\"/topic/messages\", function(message) {\n          console.log(\"socket: \", message);\n          let msg = JSON.parse(message.body);\n          messagesListHandler([msg]);\n        });\n      },\n      this.stompFailureCallback\n    );\n  }\n\n  usernameHandler(un) {\n    this.setState({\n      username: un\n    });\n  }\n\n  usernameClickHandler() {\n    this.setState({\n      messageClass: \"show\",\n      messageSubmitClass: \"show\",\n      usernameClass: \"hide\"\n    });\n  }\n\n  messageChangeHandler(msg) {\n    this.setState({\n      noteText: msg\n    });\n  }\n\n  messagesListHandler(msgArray) {\n    let tmp = _.uniqBy([...this.state.messages, ...msgArray], \"id\");\n    tmp.sort(function compare(a, b) {\n      var dateA = new Date(a.createdAt);\n      var dateB = new Date(b.createdAt);\n      return dateA - dateB;\n    });\n    this.setState({\n      messages: tmp\n    });\n  }\n\n  messageClickHandler() {\n    this.stompClient.send(\n      \"/app/hello\",\n      {},\n      JSON.stringify({\n        username: this.state.username,\n        text: this.state.noteText\n      })\n    );\n    /* console.log(this.state.noteText);\n    fetch(\"/messages\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        text: this.state.noteText,\n        username: this.state.username\n      })\n    })\n      .then(function(data) {\n        console.log(\"Request success: \", data);\n      })\n      .catch(function(error) {\n        console.log(\"Request failure: \", error);\n      });*/\n  }\n\n  updateNoteText(noteText) {\n    this.setState({ noteText: noteText.target.value });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <UserForm\n          usernameClass={this.state.usernameClass}\n          usernameHandler={this.usernameHandler}\n          usernameClickHandler={this.usernameClickHandler}\n        ></UserForm>\n\n        <div class=\"chat-container\">\n          <MessageWindow\n            messageClass={this.state.messageClass}\n            username={this.state.username}\n            messages={this.state.messages}\n            messagesListHandler={this.messagesListHandler}\n          ></MessageWindow>\n\n          <MessageSubmit\n            messageChangeHandler={this.messageChangeHandler}\n            messageClickHandler={this.messageClickHandler}\n            messageSubmitClass={this.state.messageSubmitClass}\n          ></MessageSubmit>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}