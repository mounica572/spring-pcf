{"version":3,"sources":["components/MessageWindow.js","components/UserForm.js","components/MessageSubmit.js","App.js","serviceWorker.js","index.js"],"names":["MessageWindow","props","formatDate","date","d","Date","userTimezoneOffset","getTimezoneOffset","getTime","toUTCString","slice","scrollToBottom","messagesEnd","scrollIntoView","block","inline","behavior","state","messages","bind","this","connect","evtSource","EventSource","onopen","onmessage","e","tmp","JSON","parse","data","_","uniqBy","setState","onerror","err","un","username","Fragment","className","messageClass","ref","el","map","message","index","key","text","createdAt","Component","UserForm","usernameClass","type","onChange","usernameHandler","target","value","onClick","usernameClickHandler","MessageSubmit","messageSubmitClass","id","messageChangeHandler","messageClickHandler","App","noteText","msg","console","log","fetch","method","headers","body","stringify","then","catch","error","class","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0TAoFeA,E,YAhFb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAcRC,WAAa,SAAAC,GACX,IAAIC,EAAI,IAAIC,KAAKF,GACbG,EAA6C,IAAxBF,EAAEG,oBAE3B,OADS,IAAIF,KAAKD,EAAEI,UAAYF,GACtBG,cAAcC,MAAM,GAAI,IAnBjB,EAqCnBC,eAAiB,WACf,EAAKC,YAAYC,eAAe,CAC9BC,MAAO,MACPC,OAAQ,UACRC,SAAU,YAvCZ,EAAKC,MAAQ,CAAEC,SAAU,IACzB,EAAKhB,WAAa,EAAKA,WAAWiB,KAAhB,gBAClB,EAAKP,YAAc,KAJF,E,iFAQjBQ,KAAKC,Y,2CAILD,KAAKT,mB,gCAUI,IAAD,OACFW,EAAY,IAAIC,YAAY,oBAGlCD,EAAUE,OAAS,aACnBF,EAAUG,UAAY,SAAAC,GACpB,IAAIC,EAAG,sBAAO,EAAKV,MAAMC,UAAlB,CAA4BU,KAAKC,MAAMH,EAAEI,QAChDH,EAAMI,IAAEC,OAAOL,EAAK,MACpB,EAAKM,SAAS,CAAEf,SAAUS,KAE5BL,EAAUY,QAAU,SAASC,O,+BAcrB,IAAD,OACHjC,EAAakB,KAAKlB,WAClBkC,EAAKhB,KAAKnB,MAAMoC,SACpB,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKC,UAAS,uBAAkBnB,KAAKnB,MAAMuC,eACzC,wCAAcpB,KAAKnB,MAAMoC,UACzB,8BAEF,yBAAKE,UAAS,yBAAoBnB,KAAKnB,MAAMuC,eAC3C,wBACED,UAAU,eACVE,IAAK,SAAAC,GACH,EAAK9B,YAAc8B,IAGpBtB,KAAKH,MAAMC,SAASyB,IAAI,SAASC,EAASC,GACzC,OACE,wBAAIC,IAAKD,GACP,0BAAMN,UAAU,YACbK,EAAQP,SAAWO,EAAQP,SAAWD,EADzC,KAC+C,KAE/C,0BAAMG,UAAU,gBAAhB,IAAiCK,EAAQG,KAAzC,KACA,yBAAKR,UAAU,QAAQrC,EAAW0C,EAAQI,sB,GAtEhCC,aC0BbC,E,YA3Bb,WAAYjD,GAAQ,qEACZA,I,sEAGE,IAAD,OACP,OACE,yBAAKsC,UAAS,oBAAenB,KAAKnB,MAAMkD,gBACtC,yBAAKZ,UAAU,UAAf,8BACA,2BACEa,KAAK,OACLb,UAAU,YACVc,SAAU,SAAA3B,GAAC,OAAI,EAAKzB,MAAMqD,gBAAgB5B,EAAE6B,OAAOC,UAErD,6BACE,uBACEJ,KAAK,SACLb,UAAU,eACVkB,QAAS,SAAA/B,GAAC,OAAI,EAAKzB,MAAMyD,yBAH3B,gB,GAfaT,aCkCRU,E,YA/Bb,WAAY1D,GAAQ,IAAD,8BACjB,4CAAMA,KACDgB,MAAQ,CAAE2B,QAAS,IAFP,E,sEAKT,IAAD,OACP,OACE,yBAAKL,UAAS,4BAAuBnB,KAAKnB,MAAM2D,qBAC9C,8BACE,2BACErB,UAAU,eACVsB,GAAG,UACHT,KAAK,OACLC,SAAU,SAAA3B,GAAC,OAAI,EAAKzB,MAAM6D,qBAAqBpC,EAAE6B,OAAOC,UAE1D,6BACE,uBAAGjB,UAAU,eAAb,0BACA,uBACEa,KAAK,SACLb,UAAU,eACVkB,QAAS,SAAA/B,GAAC,OAAI,EAAKzB,MAAM8D,wBAH3B,iB,GAlBgBd,aCyFbe,E,YArFb,WAAY/D,GAAQ,IAAD,8BACjB,4CAAMA,KACDgB,MAAQ,CACXgD,SAAU,GACV5B,SAAU,GACVG,aAAc,OACdW,cAAe,OACfS,mBAAoB,QAEtB,EAAKN,gBAAkB,EAAKA,gBAAgBnC,KAArB,gBACvB,EAAKuC,qBAAuB,EAAKA,qBAAqBvC,KAA1B,gBAC5B,EAAK4C,oBAAsB,EAAKA,oBAAoB5C,KAAzB,gBAC3B,EAAK2C,qBAAuB,EAAKA,qBAAqB3C,KAA1B,gBAZX,E,6EAeHiB,GACdhB,KAAKa,SAAS,CACZI,SAAUD,M,6CAKZhB,KAAKa,SAAS,CACZO,aAAc,OACdoB,mBAAoB,OACpBT,cAAe,W,2CAIEe,GACnB9C,KAAKa,SAAS,CACZgC,SAAUC,M,4CAKZC,QAAQC,IAAIhD,KAAKH,MAAMgD,UACvBI,MAAM,YAAa,CACjBC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAM5C,KAAK6C,UAAU,CACnB1B,KAAM3B,KAAKH,MAAMgD,SACjB5B,SAAUjB,KAAKH,MAAMoB,aAGtBqC,KAAK,SAAS5C,GACbqC,QAAQC,IAAI,oBAAqBtC,KAElC6C,MAAM,SAASC,GACdT,QAAQC,IAAI,oBAAqBQ,O,qCAIxBX,GACb7C,KAAKa,SAAS,CAAEgC,SAAUA,EAASV,OAAOC,U,+BAI1C,OACE,kBAAC,IAAMlB,SAAP,KACE,kBAAC,EAAD,CACEa,cAAe/B,KAAKH,MAAMkC,cAC1BG,gBAAiBlC,KAAKkC,gBACtBI,qBAAsBtC,KAAKsC,uBAG7B,yBAAKmB,MAAM,kBACT,kBAAC,EAAD,CACErC,aAAcpB,KAAKH,MAAMuB,aACzBH,SAAUjB,KAAKH,MAAMoB,WAGvB,kBAAC,EAAD,CACEyB,qBAAsB1C,KAAK0C,qBAC3BC,oBAAqB3C,KAAK2C,oBAC1BH,mBAAoBxC,KAAKH,MAAM2C,2B,GA9EzBX,aCME6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMf,KAAK,SAAAgB,GACjCA,EAAaC,iB","file":"static/js/main.d7848675.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport _ from \"lodash\";\n\nclass MessageWindow extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { messages: [] };\n    this.formatDate = this.formatDate.bind(this);\n    this.messagesEnd = null;\n  }\n\n  componentDidMount() {\n    this.connect();\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom();\n  }\n\n  formatDate = date => {\n    let d = new Date(date);\n    var userTimezoneOffset = d.getTimezoneOffset() * 60000;\n    let d2 = new Date(d.getTime() - userTimezoneOffset);\n    return d2.toUTCString().slice(0, -4);\n  };\n\n  connect() {\n    const evtSource = new EventSource(\"/stream/messages\");\n    //const evtSource = new EventSource(\"http://localhost:8090/stream/messages\");\n\n    evtSource.onopen = function() {};\n    evtSource.onmessage = e => {\n      let tmp = [...this.state.messages, JSON.parse(e.data)];\n      tmp = _.uniqBy(tmp, \"id\");\n      this.setState({ messages: tmp });\n    };\n    evtSource.onerror = function(err) {\n      // console.warn(\"EventSource failed:\", err);\n    };\n  }\n\n  scrollToBottom = () => {\n    this.messagesEnd.scrollIntoView({\n      block: \"end\",\n      inline: \"nearest\",\n      behavior: \"smooth\"\n    });\n    //this.messagesEnd.scrollTop = this.messagesEnd.scrollHeight;\n  };\n\n  render() {\n    let formatDate = this.formatDate;\n    let un = this.props.username;\n    return (\n      <React.Fragment>\n        <div className={`welcome-pane ${this.props.messageClass}`}>\n          <h3>Welcome, {this.props.username}</h3>\n          <hr />\n        </div>\n        <div className={`message-window ${this.props.messageClass}`}>\n          <ul\n            className=\"message-list\"\n            ref={el => {\n              this.messagesEnd = el;\n            }}\n          >\n            {this.state.messages.map(function(message, index) {\n              return (\n                <li key={index}>\n                  <span className=\"username\">\n                    {message.username ? message.username : un} :{\" \"}\n                  </span>\n                  <span className=\"message-text\"> {message.text} </span>\n                  <div className=\"date\">{formatDate(message.createdAt)}</div>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default MessageWindow;\n","import React, { Component } from \"react\";\nclass UserForm extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className={`user-form ${this.props.usernameClass}`}>\n        <div className=\"header\"> Please Enter a User Name </div>\n        <input\n          type=\"text\"\n          className=\"textInput\"\n          onChange={e => this.props.usernameHandler(e.target.value)}\n        />\n        <div>\n          <a\n            type=\"button\"\n            className=\"btn btn-dark\"\n            onClick={e => this.props.usernameClickHandler()}\n          >\n            Submit\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UserForm;\n","import React, { Component } from \"react\";\nimport _ from \"lodash\";\n\nclass MessageSubmit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { message: \"\" };\n  }\n\n  render() {\n    return (\n      <div className={`message-container ${this.props.messageSubmitClass}`}>\n        <form>\n          <input\n            className=\"message-form\"\n            id=\"message\"\n            type=\"text\"\n            onChange={e => this.props.messageChangeHandler(e.target.value)}\n          />\n          <div>\n            <p className=\"text-center\">Type your message here</p>\n            <a\n              type=\"button\"\n              className=\"btn btn-dark\"\n              onClick={e => this.props.messageClickHandler()}\n            >\n              Submit\n            </a>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default MessageSubmit;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport MessageWindow from \"./components/MessageWindow\";\nimport UserForm from \"./components/UserForm\";\nimport MessageSubmit from \"./components/MessageSubmit\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      noteText: \"\",\n      username: \"\",\n      messageClass: \"hide\",\n      usernameClass: \"show\",\n      messageSubmitClass: \"hide\"\n    };\n    this.usernameHandler = this.usernameHandler.bind(this);\n    this.usernameClickHandler = this.usernameClickHandler.bind(this);\n    this.messageClickHandler = this.messageClickHandler.bind(this);\n    this.messageChangeHandler = this.messageChangeHandler.bind(this);\n  }\n\n  usernameHandler(un) {\n    this.setState({\n      username: un\n    });\n  }\n\n  usernameClickHandler() {\n    this.setState({\n      messageClass: \"show\",\n      messageSubmitClass: \"show\",\n      usernameClass: \"hide\"\n    });\n  }\n\n  messageChangeHandler(msg) {\n    this.setState({\n      noteText: msg\n    });\n  }\n\n  messageClickHandler() {\n    console.log(this.state.noteText);\n    fetch(\"/messages\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        text: this.state.noteText,\n        username: this.state.username\n      })\n    })\n      .then(function(data) {\n        console.log(\"Request success: \", data);\n      })\n      .catch(function(error) {\n        console.log(\"Request failure: \", error);\n      });\n  }\n\n  updateNoteText(noteText) {\n    this.setState({ noteText: noteText.target.value });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <UserForm\n          usernameClass={this.state.usernameClass}\n          usernameHandler={this.usernameHandler}\n          usernameClickHandler={this.usernameClickHandler}\n        ></UserForm>\n\n        <div class=\"chat-container\">\n          <MessageWindow\n            messageClass={this.state.messageClass}\n            username={this.state.username}\n          ></MessageWindow>\n\n          <MessageSubmit\n            messageChangeHandler={this.messageChangeHandler}\n            messageClickHandler={this.messageClickHandler}\n            messageSubmitClass={this.state.messageSubmitClass}\n          ></MessageSubmit>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}